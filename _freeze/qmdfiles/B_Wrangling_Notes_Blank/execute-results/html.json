{
  "hash": "9c99c07ff8daed91b37551259ade9cd6",
  "result": {
    "markdown": "---\ntitle: 'Notes B'\nsubtitle: \"Wrangling data with `dplyr`: `filter`, `select`, `arrange`\"\nformat:\n  html:\n    toc: true\n    code-overflow: wrap\n    code-fold: false\n    embed-resources: true\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n# Importing Data\n\nIn this class, we are going to be working with the `possum` dataset which consists of nine morphometric measurements on each of 104 mountain brushtail possums, trapped at seven Australian sites from Southern Victoria to central Queensland. \n\nSource: Lindenmayer, D. B., Viggers, K. L., Cunningham, R. B., and Donnelly, C. F. 1995. Morphological variation among columns of the mountain brushtail possum, Trichosurus caninus Ogilby (Phalangeridae: Marsupiala). Australian Journal of Zoology 43: 449-458.\n\nWhat is a .csv file? \n\nHow do we import it into R?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#possum.csv needs to be saved in the same directory as this file. \n#possum <- read.csv(\"possum.csv\")\n```\n:::\n\n\nAlternatively, you can download it directly from the `DAAD` package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#You need to install the DAAG package first. Then you can call it using the code below. \n#library(DAAG)\n#data(possum)\n```\n:::\n\n\nLet's take a look at this data for a minute to see what information has been recorded. \n\nThis data frame contains the following columns:\n\n`case`\nobservation number\n`site`\none of seven locations where possums were trapped. The sites were, in order,Cambarville, Bellbird, Whian Whian, Byrangery, Conondale, Allyn River and Bulburin\n`Pop`\na factor which classifies the sites as Vic Victoria, other New South Wales or Queensland\n`sex`\na factor with levels f female, m male\n`age`\nage\n`hdlngth`\nhead length, in cm\n`skullw`\nskull width, in cm\n`totlngth`\ntotal length, in cm\n`taill`\ntail length, in cm\n`footlgth`\nfoot length, in cm\n`earconch`\near conch length, in cm\n`eye`\ndistance from medial canthus to lateral canthus of right eye, in cm\n`chest`\nchest girth, in cm\n`belly`\nbelly girth, in cm\n\n# Installing and Using Packages\n\nSometimes everything we need (data, functions, etc) are not available in base R. In R, expert users will package up useful things like data and functions into packages that be download and used. \n\nFirst, you need to download the package from the right hand menu --> \nYou only need to do this once. \n\nIn each new .Rmd document, you need to call any packages you want to use  but adding the code `library(packagename)` inside an R chunk. \n\nFor example, in this class we will use the `tidyverse` package a lot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n# `dplyr`\n\nThere are actually many commonly used packages wrapped up inside one `tidyverse` package. \n\nToday we are specifically going to be talking about the package `dplyr` which is useful to manipulating data sets.\n\n# `filter`\n\nWe can use the `filter` function to extract ***rows*** from the data that have a particular characteristic. \n\nFor example, we may be interested in only looking at female possums.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#start with the possums dataset, the pipe \"%\" means apply the action on the following line to the previous line. In this case, pick out only the rows were the sex variable is \"f\" \n\n\n\n##note the sex is text/categorical and so quotation marks are needed. \n##R doesn't care about whether they are double quotation marks (\") or single ('). They work the same. \n# If we don't assign it to an object, then it just prints out for us to see! \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#oftentimes, we want to take our subset and give it a new name. This takes our subset and assigns it to a new dataset called `possum_f`. \n\n\n\n#Notice if you assign it to an object that it doesn't print out the contents. \n# You'll see the new object in your environment on the top right ---> \n# If you click on the word `possum_f` (not the blue play button) it will open the object so you can see what is saved inside. \n```\n:::\n\n\nIt can also be used with numeric criteria. \n\nSuppose we want a list of all the possums whose total length is less than 80cm. \n\n\n::: {.cell}\n\n:::\n\n\nThe logical operators are given below: \n\n![](https://ehsanx.github.io/intro2R/images/logical.png){width=50%}\n\n# `select`\n\nselect is used to extract only certain ***columns***. For example, perhaps we only want to print out a dataset with only the population, the sex, and the total length of each possum. \n\n\n::: {.cell}\n\n:::\n\n\nWe can combine criteria together as well in one command with multiple pipes: \n\n\n::: {.cell}\n\n:::\n\n\n# `arrange`\n\nThe `arrange` function allows us to order the rows of the data frame by the values of a particular column. \n\nFor example, arrange all the female possums by the longest length to the shortest total length\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#use arrange(variable) to go from least to most\n#use arrange(desc(variable)) to go from most to least, arrange(-variable) also works\n```\n:::\n\n\n# `slice`\n\nThe slice function will allow us to pick only a subset of the rows based on their numeric order (1st through last). \n\nFor example, if I want a list the 5 female possums with longest total lengths.  \n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}