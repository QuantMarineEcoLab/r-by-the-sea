---
title: "Notes O "
subtitle: "Mapping in R"
format:
  html:
    toc: true
    code-overflow: wrap
    code-fold: false
    embed-resources: true
execute: 
  message: FALSE
  warning: FALSE
editor_options: 
  chunk_output_type: console
---


### Before we get started, some context:

- `R` is ***fantastic*** for spacial analysis (not covered in this class... look for classes related to spacial statistics)
- `R` is *great* for interactive data visualization (via `leaflet` or `shiny`... more on this on Thursday)
- `R` is *okay* at spacial data visualization (creating maps).
  - There are many different packages in `R` for creating maps. I've found that different packages perform best for different maps. We will talk about a few different ones today. 
  -  If you have a highly map-centric project, there is nothing wrong with working in ArcGIS or QGIS if you find the mapping tools in R insufficient. There are many recent improvements with new packages (like `sp`, `rgdal` and `rgeos`) which profiles much of the functionality of GIS packages! Exciting! (not very beginner friendly - requires familiarity with GIS concepts)

# Using the `maps` package

Perhaps the simplest approach to drawing maps is to use `geom_polygon()` to draw boundaries for different regions.

The `maps` package contains several built in maps: world (for all countries in the world), france, italy, nz, usa, state (usa state boundaries), and county (usa counties). The maps package isn’t particularly accurate or up-to-date, but it’s built into R so it’s an easy place to start.

To reference each map you use `map_data("mapname")`. 

```{r message=FALSE, warning=FALSE}
#LOAD PACKAGES
library(tidyverse)
library(maps)

#LOAD DATA
world_map <- map_data("world")
```

```{r}
#World Map

```


## What about subsetting the data? 

```{r}
#Subset to get Italy


#Subset to get USA
```


## What if aspect ratio is not maintained? 

```{r}
# ASPECT RATIO NOT MAINTAINED

```

```{r}
# ASPECT RATIO MAINTAINED

```

## USA with states

```{r}
#Load Data from maps
usa_states <- map_data("state")


#Plot of USA with state borders

```


## How to customize colors? 

```{r}
#Load Data from maps and plot colors by latitude
usa_states <- map_data("state")


```

  


```{r}
#LOAD PACKAGES
library(tidyverse)
library(leaflet)
```





# Interactive maps using `leaflet` 

[`leaflet` is an open-source JavaScript library that is used to create dynamic online maps.](https://bookdown.org/nicohahn/making_maps_with_r5/docs/leaflet.html) The identically named R package makes it possible to create these kinds of maps in R as well.

```{r}
leaflet() %>%
  addTiles() %>%
  setView(lng = -70.61, lat = 42.99, zoom = 5) 
```


```{r}
# Download Shoals intertidal transect data coordinates
transect_info <- read.csv(file = 'https://portal.edirepository.org/nis/dataviewer?packageid=edi.236.1&entityid=29e551611c670b81c4aae9d2a2d82e7b')

transect_info$lat <- transect_info$Lat_deg+transect_info$Lat_min/60
transect_info$long <- -transect_info$Long_deg-transect_info$Long_min/60

leaflet() %>%
  addTiles() %>%
  setView(lng = -70.61, lat = 42.99, zoom = 13) 

```


## Adding points

```{r}
# use addCircleMarkers to add data


```


## Different backgrounds
```{r, eval=F}
# Use addProviderTiles(providers$Esri.WorldImagery)


```

## Different colors

```{r}

transect_info$color = ifelse(transect_info$Position=='sheltered', 'blue', 'red')




```